// <auto-generated />
using System;
using LogMeOut.ImageHub.Repository.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LogMeOut.ImageHub.Repository.Migrations
{
    [DbContext(typeof(ImageHubDbContext))]
    [Migration("20191118165708_UserRelationsTable")]
    partial class UserRelationsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LogMeOut.ImageHub.Repository.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CommenterId");

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("PostId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CommenterId");

                    b.HasIndex("PostId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("LogMeOut.ImageHub.Repository.Models.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("PostId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("LogMeOut.ImageHub.Repository.Models.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("ImageId")
                        .IsRequired();

                    b.Property<string>("PostDescription")
                        .IsRequired();

                    b.Property<Guid>("PosterId");

                    b.HasKey("PostId");

                    b.HasIndex("PosterId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("LogMeOut.ImageHub.Repository.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FacebookUserId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ProfileImageId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("LogMeOut.ImageHub.Repository.Models.UserRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RelationType");

                    b.Property<Guid>("TargetUserId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TargetUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRelation");
                });

            modelBuilder.Entity("LogMeOut.ImageHub.Repository.Models.Comment", b =>
                {
                    b.HasOne("LogMeOut.ImageHub.Repository.Models.User", "Commenter")
                        .WithMany("Comments")
                        .HasForeignKey("CommenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LogMeOut.ImageHub.Repository.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("LogMeOut.ImageHub.Repository.Models.Like", b =>
                {
                    b.HasOne("LogMeOut.ImageHub.Repository.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LogMeOut.ImageHub.Repository.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("LogMeOut.ImageHub.Repository.Models.Post", b =>
                {
                    b.HasOne("LogMeOut.ImageHub.Repository.Models.User", "Poster")
                        .WithMany("Posts")
                        .HasForeignKey("PosterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("LogMeOut.ImageHub.Repository.Models.UserRelation", b =>
                {
                    b.HasOne("LogMeOut.ImageHub.Repository.Models.User", "TargetUser")
                        .WithMany("RelationTargetings")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LogMeOut.ImageHub.Repository.Models.User", "User")
                        .WithMany("Relations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
